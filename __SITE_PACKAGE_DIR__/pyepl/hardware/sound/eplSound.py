# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eplSound', [dirname(__file__)])
        except ImportError:
            import _eplSound
            return _eplSound
        if fp is not None:
            try:
                _mod = imp.load_module('_eplSound', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eplSound = swig_import_helper()
    del swig_import_helper
else:
    import _eplSound
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class audioBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, audioBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, audioBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _eplSound.new_audioBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplSound.delete_audioBuffer
    __del__ = lambda self : None;
    __swig_setmethods__["recBuf"] = _eplSound.audioBuffer_recBuf_set
    __swig_getmethods__["recBuf"] = _eplSound.audioBuffer_recBuf_get
    if _newclass:recBuf = _swig_property(_eplSound.audioBuffer_recBuf_get, _eplSound.audioBuffer_recBuf_set)
    __swig_setmethods__["playBuf"] = _eplSound.audioBuffer_playBuf_set
    __swig_getmethods__["playBuf"] = _eplSound.audioBuffer_playBuf_get
    if _newclass:playBuf = _swig_property(_eplSound.audioBuffer_playBuf_get, _eplSound.audioBuffer_playBuf_set)
    __swig_setmethods__["recChans"] = _eplSound.audioBuffer_recChans_set
    __swig_getmethods__["recChans"] = _eplSound.audioBuffer_recChans_get
    if _newclass:recChans = _swig_property(_eplSound.audioBuffer_recChans_get, _eplSound.audioBuffer_recChans_set)
    __swig_setmethods__["playChans"] = _eplSound.audioBuffer_playChans_set
    __swig_getmethods__["playChans"] = _eplSound.audioBuffer_playChans_get
    if _newclass:playChans = _swig_property(_eplSound.audioBuffer_playChans_get, _eplSound.audioBuffer_playChans_set)
    __swig_setmethods__["rate"] = _eplSound.audioBuffer_rate_set
    __swig_getmethods__["rate"] = _eplSound.audioBuffer_rate_get
    if _newclass:rate = _swig_property(_eplSound.audioBuffer_rate_get, _eplSound.audioBuffer_rate_set)
    __swig_setmethods__["recording"] = _eplSound.audioBuffer_recording_set
    __swig_getmethods__["recording"] = _eplSound.audioBuffer_recording_get
    if _newclass:recording = _swig_property(_eplSound.audioBuffer_recording_get, _eplSound.audioBuffer_recording_set)
    __swig_setmethods__["samplesPlayed"] = _eplSound.audioBuffer_samplesPlayed_set
    __swig_getmethods__["samplesPlayed"] = _eplSound.audioBuffer_samplesPlayed_get
    if _newclass:samplesPlayed = _swig_property(_eplSound.audioBuffer_samplesPlayed_get, _eplSound.audioBuffer_samplesPlayed_set)
audioBuffer_swigregister = _eplSound.audioBuffer_swigregister
audioBuffer_swigregister(audioBuffer)

class eplSound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eplSound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eplSound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _eplSound.new_eplSound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplSound.delete_eplSound
    __del__ = lambda self : None;
    def append(self, *args): return _eplSound.eplSound_append(self, *args)
    def consume(self, *args): return _eplSound.eplSound_consume(self, *args)
    def clear(self): return _eplSound.eplSound_clear(self)
    def clearPlayBuffer(self): return _eplSound.eplSound_clearPlayBuffer(self)
    def clearRecBuffer(self): return _eplSound.eplSound_clearRecBuffer(self)
    def recstart(self): return _eplSound.eplSound_recstart(self)
    def recstop(self): return _eplSound.eplSound_recstop(self)
    def startstream(self): return _eplSound.eplSound_startstream(self)
    def stopstream(self, abort = 0): return _eplSound.eplSound_stopstream(self, abort)
    def getBufferSize(self): return _eplSound.eplSound_getBufferSize(self)
    def getSamplesPlayed(self): return _eplSound.eplSound_getSamplesPlayed(self)
    def resetSamplesPlayed(self): return _eplSound.eplSound_resetSamplesPlayed(self)
    def getRecChans(self): return _eplSound.eplSound_getRecChans(self)
    def getPlayChans(self): return _eplSound.eplSound_getPlayChans(self)
    def getSampleRate(self): return _eplSound.eplSound_getSampleRate(self)
    def getPlayStreamSampleRate(self): return _eplSound.eplSound_getPlayStreamSampleRate(self)
    def getRecStreamSampleRate(self): return _eplSound.eplSound_getRecStreamSampleRate(self)
    def getBufferUsed(self): return _eplSound.eplSound_getBufferUsed(self)
    def getPlayStreamLatency(self): return _eplSound.eplSound_getPlayStreamLatency(self)
    def getRecStreamLatency(self): return _eplSound.eplSound_getRecStreamLatency(self)
    SCALE = _eplSound.eplSound_SCALE
    SAMPLE_RATE = _eplSound.eplSound_SAMPLE_RATE
    SAMPLE_SILENCE = _eplSound.eplSound_SAMPLE_SILENCE
    BUF_SIZE = _eplSound.eplSound_BUF_SIZE
    NUM_INTERNAL_BUFF = _eplSound.eplSound_NUM_INTERNAL_BUFF
    DEVICE = _eplSound.eplSound_DEVICE
    FORMAT_SIZE = _eplSound.eplSound_FORMAT_SIZE
    PLAY_BUF_LEN = _eplSound.eplSound_PLAY_BUF_LEN
    REC_BUF_LEN = _eplSound.eplSound_REC_BUF_LEN
    NUM_CHANNELS = _eplSound.eplSound_NUM_CHANNELS
eplSound_swigregister = _eplSound.eplSound_swigregister
eplSound_swigregister(eplSound)


def inout(*args):
  return _eplSound.inout(*args)
inout = _eplSound.inout


